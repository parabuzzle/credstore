{"name":"Credstore","tagline":"A Ruby gem that provides an object for working with encrypting and decrypting strings using RSA","body":"Credstore\r\n=========\r\n[![Gem Version](https://badge.fury.io/rb/credstore.png)](http://badge.fury.io/rb/credstore)\r\n\r\nA Ruby gem that provides an object for working with encrypting and decrypting strings using RSA\r\n\r\n\tgem install credstore\r\n\r\nWhy Credstore?\r\n---\r\nBecause saving passwords and keys for services in plain text is crazy... why not properly encrypt them when you write them out and decrypt them when you read them in to you application?\r\n\r\nUsage\r\n---\r\n\t# Generate Keys using Crypt class\r\n\trequire 'credstore'\r\n\toptions = {:length=>2048, :keys_dir=>\"./keys\", \r\n                   :public_key=>\"id_rsa.pub\", \r\n                   :private_key=>\"id_rsa\"}\r\n\tCredstore::Crypt.generate_keys(options)\r\n\t\r\n\t##\r\n\t# working with strings\r\n\t \r\n\t# private key is optional.. if there is no private key supplied, you can encrypt but cannot decrypt.\r\n\toptions = {:keys_dir=>\"#{$LIB_BASE_DIR}/tmp/\", \r\n                   :public_key=>\"id_rsa.pub\", \r\n                   :private_key=>\"id_rsa\"}\r\n\tcrypt = Credstore::Crypt.new(options)\r\n\t\r\n\t# Encrypt a string\r\n\tcrypt.encrypt_string(\"Hello World\")\r\n\t\r\n\t# Decrypt a string\r\n\tcrypt.decrypt_string(crypt.encrypt_string(\"Hello World\"))\r\n\t\r\n\t##\r\n\t# working with storage\r\n\toptions = {:keys_dir=>\"./keys\", \r\n                   :database=>\"credstore.db\", \r\n                   :public_key=>\"id_rsa.pub\", \r\n                   :private_key=>\"id_rsa\"}\r\n\tstorage = Credstore::Storage.new(options)\r\n\t\r\n\t# store encrypted string for key\r\n\tstorage.write_key(\"key\", \"value\")\r\n\t\r\n\t# decrypt and read value for key\r\n\tstorage.read_key(\"key\")\r\n\t\r\n\t# read and write keys using the dot operator shortcut\r\n\tstorage.key=\"value\"\r\n\tstorage.key\r\n\t\r\n\t\r\nOptions Explanations\r\n---\r\n**Credstore::Crypt.generate_keys options:**\r\n\t\r\n\t* length => length of the key (default is 2048)\r\n\t* keys_dir => the directory that the keys will be written (default is ./)\r\n\t* public_key => the name of the public key (default is id_rsa.pub)\r\n\t* private_key => the name of the private key (default is id_rsa)\r\n\t\r\n**Credstore::Crypt.new options:**\r\n\r\n\t* keys_dir => the directory that the key(s) are located (default is ./)\r\n\t* public_key => the public key (default is id_rsa.pub)\r\n\t* private_key => the private key (default is nil.. if there is no private key you will be able to encrypt but not decrypt strings)\r\n\t\r\n**Credstore::Storage.new options:**\r\n\r\n\t* keys_dir => the directory that the key(s) are located (default is ./)\r\n\t* database => the path to the storage file for your credstore (default is ./credstore.db)\r\n\t* public_key => the public key (default is id_rsa.pub)\r\n\t* private_key => the private key (default is id_rsa)\r\n\r\n\t\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}